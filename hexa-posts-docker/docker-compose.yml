version: "3.9"

services:
  # bauen das Dockerfile dass hier neben an liegt
  app:
    build:
      context: .
    command: --spring.jpa.hibernate.ddl-auto=update --spring.datasource.url=jdbc:mysql://db:3306/${MYSQL_DB} --spring.datasource.username=${MYSQL_USER} --spring.datasource.password=${MYSQL_PASSWORD} --spring.datasource.driver-class-name=com.mysql.jdbc.Driver --mqtt.broker=tcp://broker:1883
    depends_on:
      - db #sorgt dafür, das der container auf jedenfall ebenso existiert
    networks:
      - db-net
      - broker-net
      - public-net

  listener:
    image: nodered/node-red:2.1.3
    environment:
      - TZ=Europe/Amsterdam
    ports:
      - "1880:1880"
    volumes:
      - node-red-data:/data
    networks:
      - broker-net
    

# wie kann man warten? 
# -> mit port checks aus Anwendungssicht oder ggf. Healthcheck (todo)
# -> in der Anwendung selbst Retries oder Sleeps vorsehen

  db:
    image: mysql:5.7
    environment: # Konfigurationsmöglichkeiten im hub nachlesen
      - MYSQL_DATABASE=${MYSQL_DB}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      # - ./data:/var/lib/mysql # steht ebenfalls im hub, nicht das schönste
      - mysql-db:/var/lib/mysql
    networks:
      - db-net

  broker:
    image: eclipse-mosquitto:2.0
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - broker-net

  proxy:
    image: nginx:1.21
    ports:
      - 8081:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - public-net

volumes:
  mysql-db: # für normale docker volumes sind keine weiteren konfigs notwendig
  mosquitto-data:
  mosquitto-log:
  node-red-data:

networks:
  db-net:
    driver: bridge # ist i.R. die Default-Variante
  broker-net:
    driver: bridge
  public-net:
    driver: bridge


# Netzwerke in Docker?
# -> docker network create --driver bridge <name>
# -> docker run --network <name>

# wie sind auf der konsole Volumes entstanden?
# -> cli befehl volume create
# -> unnamed volumes
# -> volumes von container übernehmen

# https://t1p.de/wba1

# spring.jpa.hibernate.ddl-auto=update
# spring.datasource.url=jdbc:mysql://localhost:3306/db_example
# spring.datasource.username=springuser
# spring.datasource.password=ThePassword
# spring.datasource.driver-class-name =com.mysql.jdbc.Driver

# Docker-Compose:
#   -> up startet alle Dienste, Volumes und Netzwerke
#      -> app [weitereDienste]
#      -> -d als Daemon
#   -> down stop und entfernt container 
#      -> -v entfernt auch alle container-volumes
#   -> ps zeigt alle aktuellen dienste im compose file
#   -> exec [service] [command]

# Wir haben einen Dienst mit Java / Spring und JPA...
# was könnten wir in so einem Compose File jetzt
# Container konfigurieren?
# -> was für konfigurationen für die app
#    -> wie war denn run-Befehl?
#    -> port mapping; -p hostPort:containerPort
#    -> volumes mappen (h2) ... ggf. auch verzichten
# -> was für zusätzliche Container ggf. notwendig?
#    -> datenbank als dienst hinzunehmen
#    -> broker